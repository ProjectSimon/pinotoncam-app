/* SPDX-License-Identifier: BSD-2-Clause */
/*
 * Copyright (C) 2021, Raspberry Pi (Trading) Ltd.
 * * Copyright (C) 2022 - 2024, Csaba Nagy.
 * Copyright (C) 2024, Project Simon, Martin TOUZOT.
 *
 * AUTO-GENERATED, DO NOT MODIFY!
 */
#include "core/version.hpp"

#if LIBEGL_PRESENT
static constexpr int egl = 1;
#else
static constexpr int egl = 0;
#endif

#if QT_PRESENT
static constexpr int qt = 1;
#else
static constexpr int qt = 0;
#endif

#if LIBDRM_PRESENT
static constexpr int drm = 1;
#else
static constexpr int drm = 0;
#endif

#if LIBAV_PRESENT
static int libav = 1;
#else
static int libav = 0;
#endif

static const std::string version {"@VER@"};

static const std::string caps {"egl:" + std::to_string(egl) +
							   " qt:" + std::to_string(qt) +
							   " drm:" + std::to_string(drm) +
							   " libav:" + std::to_string(libav)};

const std::string &PinotonCamAppVersion()
{
	return version;
}

const std::string &PinotonCamAppCapabilities()
{
	return caps;
}

std::string getHwId() {
    std::ifstream cpuinfo("/proc/cpuinfo");
    std::string line;
    std::string serialTag = "Serial";
    
    while (std::getline(cpuinfo, line)) {
        if (line.find(serialTag) != std::string::npos) {
            std::string serial = line.substr(line.find(":") + 1);
            // Remove leading and trailing whitespace
            size_t start = serial.find_first_not_of(" \t");
            size_t end = serial.find_last_not_of(" \t");
            if (start != std::string::npos) {
                return serial.substr(start, end - start + 1);
            }
        }
    }
    cpuinfo.close();

    // Fallback to MAC address
    std::ifstream macFile("/sys/class/net/eth0/address");
    if (macFile.is_open()) {
        std::getline(macFile, line);
        macFile.close();
        return line;
    }

    return "UNKNOWN"; // As a final fallback
}
